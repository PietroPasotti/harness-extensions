# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.
[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint-capture, static-capture, unit-capture, lint-networking, static-networking, unit-networking, lint-harness-ctx, static-harness-ctx, unit-harness-ctx

[vars]
all_path = {[vars]tst_path}
capture_events_root = {toxinidir}/libs/capture_events
capture_events_source = {[vars]capture_events_root}/capture_events.py
networking_root = {toxinidir}/libs/networking
networking_source = {[vars]networking_root}/networking.py
harness_ctx_root = {toxinidir}/libs/harness_ctx
harness_ctx_source = {[vars]harness_ctx_root}/harness_ctx.py
relation_data_wrapper_root = {toxinidir}/libs/relation_data_wrapper
relation_data_wrapper_source = {[vars]relation_data_wrapper_root}/relation_data_wrapper.py

[testenv]
basepython = python3
setenv =
  PYTHONPATH={toxinidir}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  HOME
  PATH
  MODEL_SETTINGS

[testenv:lint-capture]
description = Check code against coding style standards
deps =
    autopep8
    isort
    flake8
    flake8-docstrings
    flake8-builtins
    pyproject-flake8
    pep8-naming
    black
commands =
    # pflake8 wrapper suppports config from pyproject.toml
    pflake8 {[vars]capture_events_source} --ignore=D105,D107,E501,D100,E704,N802
    isort --check-only --diff --profile=black {[vars]capture_events_source}
    black --check --diff {[vars]capture_events_source}

[testenv:static-capture]
description = Static analysis
deps =
    pyright
    ops
commands =
    pyright {[vars]capture_events_source}

[testenv:unit-capture]
description = Run unit tests
deps =
    -r{toxinidir}/requirements.txt
    pytest
commands =
    pytest {[vars]capture_events_root}/tests/



[testenv:lint-networking]
description = Check code against coding style standards
deps =
    autopep8
    isort
    flake8
    flake8-docstrings
    flake8-builtins
    pyproject-flake8
    pep8-naming
    black
commands =
    # pflake8 wrapper suppports config from pyproject.toml
    pflake8 {[vars]networking_source} --ignore=D105,D107,E501,D100,E704,N802
    isort --check-only --diff --profile=black {[vars]networking_source}
    black --check --diff {[vars]networking_source}

[testenv:static-networking]
description = Static analysis
deps =
    pyright
    ops
commands =
    pyright {[vars]networking_source}

[testenv:unit-networking]
description = Run unit tests
deps =
    -r{toxinidir}/requirements.txt
    pytest
commands =
    pytest {[vars]networking_root}/tests/



[testenv:lint-harness-ctx]
description = Check code against coding style standards
deps =
    autopep8
    isort
    flake8
    flake8-docstrings
    flake8-builtins
    pyproject-flake8
    pep8-naming
    black
commands =
    # pflake8 wrapper suppports config from pyproject.toml
    pflake8 {[vars]harness_ctx_source} --ignore=D105,D107,E501,D100,E704,N802
    isort --check-only --diff --profile=black {[vars]harness_ctx_source}
    black --check --diff {[vars]harness_ctx_source}

[testenv:static-harness-ctx]
description = Static analysis
deps =
    pyright
    ops
commands =
    pyright {[vars]harness_ctx_source}

[testenv:unit-harness-ctx]
description = Run unit tests
deps =
    -r{toxinidir}/requirements.txt
    pytest
commands =
    pytest {[vars]harness_ctx_root}/tests/


[testenv:rel-wrapper-tests]
description = Integration tests for relation wrapper
setenv=
    PYTHONPATH={[vars]relation_data_wrapper_root}
deps =
    -r{toxinidir}/requirements.txt
    pytest-operator
    pytest
commands =
    pytest -v --tb native --log-cli-level=INFO {[vars]relation_data_wrapper_root}/tests/ {posargs}
